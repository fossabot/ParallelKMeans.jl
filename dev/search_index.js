var documenterSearchIndex = {"docs":
[{"location":"#ParallelKMeans.jl-1","page":"Home","title":"ParallelKMeans.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [ParallelKMeans]","category":"page"},{"location":"#ParallelKMeans.kmeans-Tuple{Array{Float64,2},Int64}","page":"Home","title":"ParallelKMeans.kmeans","text":"Kmeans(design_matrix, k; k_init=\"k-means++\", max_iters=300, tol=1e-4, verbose=true)\n\nThis main function employs the K-means algorithm to cluster all examples\nin the training data (design_matrix) into k groups using either the\n`k-means++` or random initialisation technique for selecting the initial\ncentroids.\n\nAt the end of the number of iterations specified (max_iters), convergence is\nachieved if difference between the current and last cost objective is\nless than the tolerance level (tol). An error is thrown if convergence fails.\n\nDetails of operations can be either printed or not by setting verbose accordingly.\n\nA tuple representing labels, centroids, and sum_squares respectively is returned.\n\n\n\n\n\n","category":"method"},{"location":"#ParallelKMeans.divider-Tuple{Any,Any}","page":"Home","title":"ParallelKMeans.divider","text":"TODO 1: Document function\n\n\n\n\n\n","category":"method"},{"location":"#ParallelKMeans.inner_pairwise!-NTuple{4,Any}","page":"Home","title":"ParallelKMeans.inner_pairwise!","text":"TODO 3: Document function\n\n\n\n\n\n","category":"method"},{"location":"#ParallelKMeans.pairwise!-Tuple{Any,Any,Any}","page":"Home","title":"ParallelKMeans.pairwise!","text":"TODO 4: Document function\n\n\n\n\n\n","category":"method"},{"location":"#ParallelKMeans.pl_pairwise!","page":"Home","title":"ParallelKMeans.pl_pairwise!","text":"TODO 2: Document function\n\n\n\n\n\n","category":"function"},{"location":"#ParallelKMeans.smart_init-Tuple{Array{Float64,2},Int64}","page":"Home","title":"ParallelKMeans.smart_init","text":"smart_init(X, k; init=\"k-means++\")\n\nThis function handles the random initialisation of the centroids from the\ndesign matrix (X) and desired groups (k) that a user supplies.\n\n`k-means++` algorithm is used by default with the normal random selection\nof centroids from X used if any other string is attempted.\n\nA tuple representing the centroids, number of rows, & columns respecitively\nis returned.\n\n\n\n\n\n","category":"method"},{"location":"#ParallelKMeans.sum_of_squares-Tuple{Array{Float64,2},Array{Int64,1},Array}","page":"Home","title":"ParallelKMeans.sum_of_squares","text":"sum_of_squares(x, labels, centre, k)\n\nThis function computes the total sum of squares based on the assigned (labels)\ndesign matrix(x), centroids (centre), and the number of desired groups (k).\n\nA Float type representing the computed metric is returned.\n\n\n\n\n\n","category":"method"}]
}
